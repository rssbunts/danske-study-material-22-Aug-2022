https://github.com/puneetbhatia77/MCW-Continuous-delivery-in-Azure-DevOps/blob/master/Hands-on%20lab/Before%20the%20HOL.md

Exercise 1: Create an Azure Resource Manager (ARM) template that can provision the web application, PostgreSQL database, and deployment slots in a single automated process
Duration: 45 Minutes

Tailspin Toys has requested three Azure environments (dev, test, production), each consisting of the following resources:

App Service

Web App

Deployment slots (for zero-downtime deployments)

PostgreSQL Server

PostgreSQL Database
Since this solution is based on Azure Platform-as-a-Service (PaaS) technology, it should take advantage of that platform by utilizing automatic scale for the web app and the PostgreSQL Database PaaS service instead of running virtual machines.

Task 1: Create an Azure Resource Manager (ARM) template using Azure Cloud Shell
  -------------------------
  #Download code from below site

  curl -o studentfiles.zip https://cloudworkshop.blob.core.windows.net/agile-continous-delivery/studentfiles_dn5.zip
  unzip studentfiles.zip
  cd studentfiles
  code .

  #Modify the code as per instructions at https://github.com/puneetbhatia77/MCW-Continuous-delivery-in-Azure-DevOps/blob/master/Hands-on%20lab/HOL%20step-by-step%20-%20Continuous%20delivery%20in%20Azure%20DevOps.md

  #Required Modifications to be done in "azuredeploy.json" file
  Task 2: Configure the list of release environments parameters
  Task 3: Add a deployment slot for the "staging" version of the site
  ----------------------------

Task 4: Create the dev environment and deploy the template to Azure
#Upload "azuredeploy.json" to Azure portal from through Azure Portal CLI (bash) and run below commands with RG name say "TailSpinToysRG" and location 'eastus'

echo "Enter the Resource Group name:" &&
read resourceGroupName &&
echo "Enter the location (i.e. westus, centralus, eastus):" &&
read location

# Create the resource group:

az group create --name $resourceGroupName --location "$location"

# For the first run, select the dev environment by entering 1 and then pressing Enter for below command with username/password.

az deployment group create --resource-group $resourceGroupName --template-file "azuredeploy.json"

# Repeat the above steps and select to create the 2. test and 3. production environment. You can use the same values as used in the dev environment.

# Now you can go to axure portal and check 6 resources are created.

--------------------------------------------------------------------
Exercise 2: Create Azure DevOps project and Git Repository

# From Azure DevOps, create new project "TailspinToys".

# On the Repos page for the TailspinToys repository and locate the "Push an existing repository from command line" section. Choose the Copy push commands to clipboard button to copy the contents of the panel. We're going to use these commands in an upcoming step.

Task 2: Create a Service Connection
In Azure DevOps, ensure you are in the project that you just created, and from the bottom corner of the page, select Project settings..
Under Pipelines, select Service connections.
If this is your first service connection, you will see the below image and you can select Create service connection button to create your first service connection.
However, if there are existing service connections you will see a view like below, can add a new one by selecting New Service connection:
In either case, you will get a New service connection panel showing common connection types. 
On this panel, *Select Azure Resource Manager and then select Next.
Near the top of the page, select Service Principal (Automatic) and select Next to view the New Azure service connection panel:
On this panel ensure the following settings:

Scope level: Subscription

Subscription: Choose your Azure subscription

Resource Group: Choose the resource group you created earlier

Service Connection Name: Enter a string value such as "LabConnection" so you can find this later.

Ensure Grant access permissions to all pipelines is checked
And finally, select Save.
-------------------------------------
Task 3: Add the Tailspin Toys source code repository to Azure DevOps
Open the Azure Cloud Shell to the folder where the Student Files were unzipped (e.g. studentfiles). Then, navigate to the tailspintoysweb folder which contains the source code for our web application.

# In Azure Cloud Shell, initialize a local Git repository by running the following commands:
git init
git add . 
git commit -m "initial checkin"

# Paste the first command you copied from Azure DevOps. It will resemble the command below:
git remote add origin https://<your-org>@dev.azure.com/<your-org>/TailspinToys/_git/TailspinToys
git push -u origin --all

Navigate to the Repos > Files page which shows the files in the repository. You may need to refresh the page to see the updated files. Your source code is now appearing in Azure DevOps.

Exercise 3: Create Azure DevOps build pipeline
Azure DevOps Pipelines, Stages, Jobs, Configuration As Code.

Task 1: Create a build pipeline
In your Azure DevOps project, select the Pipelines menu option from the left-hand navigation.
Select the Create pipeline button to create a new build pipeline.
This starts a wizard where you'll first need to select where your current code is located. In a previous step, you pushed code up to Azure Repos. Select the Azure Repos Git option.  -> Select the TailspinToys git repository.-> select ASP.NET Core from the list of options.

# azure-pipelines.yml

# Either follow steps from https://github.com/puneetbhatia77/MCW-Continuous-delivery-in-Azure-DevOps/blob/master/Hands-on%20lab/HOL%20step-by-step%20-%20Continuous%20delivery%20in%20Azure%20DevOps.md#task-2-configure-the-list-of-release-environments-parameters to update azure-pipelines.yml

or 

copy updated azure-pipelines.yml file from           #  Exercise 4: Create Azure DevOps Multi Stage Release Pipeline

Note : Use the Pool "Hosted Windows 2019 with VS2019" as Win2016 is deprecated.

# Exercise 5: Trigger a build and release

# Exercise 6: Setup a pull request policy, create a task branch and submit a pull request
----------------------------------------------------------------------------
In this exercise, you will first set up a pull request policy for the master branch, then create a short-lived task branch. In this branch you will make a small code change, commit, push the code, and finally, submit a pull request with validation builds.

Then, you will merge the pull request into the master branch, triggering an automated build and release of your application. For this exercise, you will use Azure DevOps workflow to complete the tasks, but keep in mind this same process could be performed locally using the Azure Command Line Interface (CLI), or an IDE of your choice.

Task 1: Set up a pull request policy
Create a work item to associate to a pull request.

For this task, you will be creating a new work item that simulates having a task for the developer to complete that will be eventually be associated to a pull request.

On the left navigation, select Boards, then use the green plus symbol in the New column to add a new work item. Make sure to create the new work item as a Product Backlog Item.

Note: Instead of Product Backlog Item, you may see User Story or TODO, depending on what methodology you chose when you setup your organization (such as Agile, Scrum, or CMMI).

Screen showing how to use the navigation to create a new work item in the Azure Boards.

In the dialog that appears, enter the following text:

Fix the navigation on the main page home link.  Currently redirects to Privacy.
Save the work item so that it will be assigned a valid number and be ready to assign to the next pull request (created in a future exercise).

Screen showing the created work item.

Note: Your number will almost certainly be different than mine.

On left navigation, select Repos and select Branches to view branches associated with your repo. For now there is only the master branch. Select the ellipsis for the master branch and select Branch policies.

Screen showing the Azure DevOps Branches screen indicating the selection of the Branches link on the far left, followed by selecting the ellipsis next to the master branch and choosing branch policies from the menu.

Enable the policy by checking Check for linked work items (1) and Check for comment resolution (2).

Screen showing the branch policies for master screen with Check for linked work items and check for comment resolution checked and the add button for branch policy highlighted.

Let's unpack what these configurations do:

The first check, Check for linked work items enables the build policy to require a work item to be included with a pull request. The work item may be added with one of the commits, or added directly to the pull request.

Note: It is recommended to enable this setting. If you do enable this then you also must add a work item in your process below with the code changes in this task set. You can ignore this setting for the workshop if you don't want to add a work item.

The second check. Check for comment resolution ensures comments applied to this pull request during the peer review phase require resolution.

Now select + (3) to add the build policy. This will enable the build to run when a pull request is created. In the Add build policy panel, choose the correct Build pipeline and add a Display name and select Save.

Screen showing the Add Build Policy panel with the Build pipeline and Display Name values added, and Display Name and Save button highlighted.

You should see your new configured branch policy right below the Branch Policies section like this:

Screen showing build validation detail.

Task 2: Create a new branch
From left navigation Repos, choose Branches to show the Branches view. Select New branch in the upper right corner to create a new branch from master:

Screen showing configured branches with New branch button highlighted.

In the Create a branch panel, enter a name for the new branch (e.g. new-heading). In the Based on field, be sure master is selected.

Screen showing, Name and Base highlighted along with the Create button.

Select the Create button.

Task 3: Make a code change to the task branch
From the Branches view, select your newly created branch, this will navigate to a Files view showing all files for this branch.

Screen showing configured branches with the new-heading branch highlighted.

You will use this view to make a change to a source file from the web application we have been deploying to your 3 environments in earlier steps.

Screen showing Azure DevOps Branch source explorer with file detail view.

Under the tailspintoysweb folder, select the ClientApp folder, and expand and select the src folder.

Next expand the app folder then expand the home folder. In this folder, select the home.component.html file. The editor to the right displays the contents of this file. 
Now, select Edit button on the top right of the screen to begin editing the page.

Screen showing Azure DevOps Branch source explorer with target file highlighted and code editor view enabled.

Replace the text <h1>Welcome to Tailspin Toys v1!</h1> on line 1 with the following:

<h1>Welcome to Tailspin Toys v2!</h1>
Now that you've completed the code change, select the Commit button on the top right side of the screen.

Task 4: Submit a pull request
Locate and select the Create a pull request button.

On the screen, Create a pull request is highlighted.

This brings up the New Pull Request page. It shows we are submitting a request to merge code from our new-heading branch into the master branch. You have the option to change the Title and Description fields.

For the Reviewers field, type Tailspin and select [TailspinToys]\TailspinToys Team from the search results to assign a review to the TailspinToys Team (which you are a member of).

A member of this team must review the pull request before it can be merged and the details for the code change are included in the middle of the view.

On the screen, New pull request panel is shown with create button highlighted.

Select the Create to submit the pull request.

Task 5: Approve and complete a pull request
Typically, the next few steps would be performed by another team member, allowing the code to be peer reviewed.

However, in this scenario, you will continue as if you are the only developer on the project.

After submitting the pull request, you are presented with Pull Request review screen. Let's assume all the changes made were acceptable to the review team. Submitting the pull request results in this view:

Screen showing the updated wull request detail with the Approval button highlighted.

There is a lot of functionality here, but for the purpose of this lab, let's focus on this pull request approval by confirming that the build is green.

Note: If the build is not green, you cannot merge the Pull Request as in step 2-4 below. You are then blocked. If you chose the Check for linked work items policy in task 1, you will be blocked until you create and attach a work item to your pull request. You can create a new work item by selecting Boards and then Work items. Then navigate back here and you can choose the new work item from the dropdown on the right side of the page.

Next, select the Approve button to approve of the code that was modified submitted as part of the pull request. Here you can see all required checks succeeded and there are no merge conflicts. Everything necessary is green!

The section below the Description notes you approved the pull request and now you can select Complete to merge the code from the pull request into the master branch.

Screen showing the updated wull request detail with the Complete button highlighted.

On selecting Complete in the previous step, a Complete pull request panel shows. Here you can add additional comments for the merge activity.

Screen showing the Complete pull request panel box with Complete associated work items after merging and Delete new-heading after merging checked.  Customize merge commit message is unchecked.  Complete merge button is highlighted.

By selecting the Delete new-heading after merging option, our branch will be deleted after the merge has been completed and this feature keeps your repository clean of old branches help to eliminate the possibility of confusion.

Select the Complete merge button. You will then see a confirmation view of the completed pull request.

Screen showing the confirmation view of the complete pull request.

Congratulations! By following the tasks in these exercises, you created a new branch and changed some code in the new branch, submitted a pull request and approved the pull request which resulted in a code merge to the master branch.

Because you configured continuous deployment using Azure DevOps Pipelines, an automated build was triggered:

Screen showing recent pipeline runs.   The most recent is related to completion of the pull request.

And deployment to all stages executed immediately after the successful build:

Screen showing most recent pipeline run detail including each of the properly configured stages.

All stages green! Nice job!

After the hands-on lab
Duration: 10 Minutes

Task 1: Delete resources
Now since the hands-on lab is complete, go ahead and delete the resource group you created for the Tailspin Toys deployments along with the Azure DevOps project that were created for this hands-on lab. You will no longer need those resources and it will be beneficial to clean up your Azure Subscription.
These steps should be followed only after completing the hands-on lab.
---------------------------------------------------------------------


For production deploy pipeline


create env -> Production-env -> add approvals and checks

- stage: ProdDeploy  
  displayName: 'Production Deploy Stage'
  jobs:       # add below 2 lines to add env for approval
  - deployment: deploytoprod
    environment: Production-env
  - job: Deploy
